Programs use numbers to store images
Images can be represented as lists
NumPy is a library that provides a multi-dimensional array object
NumPy should already be installed with pandas
Use pip to install NumPy if you don't have NumPy

One-dimensional array: n=numpy.arange(27)
Prints: 'array([0, 1, 2, 3, 4, 5, 6, 7, 8, ... 25, 26])'

Two-dimensional array: n.reshape(3, 9)
Prints: 'array([[0, 1, 2, 3, 4, 5, 6, 7, 8],
                [9, 10, 11, 12, 13, 14, 15, 16, 17],
                [18, 19, 20, 21, 22, 23, 24, 25, 26]])'

Three-dimensional array: n.reshape(3, 3, 3)
Prints: 'array([[[0, 1, 2],
                [3, 4, 5],
                [6, 7, 8]],
                
                [[9, 10, 11],
                [12, 13, 14],
                [15, 16, 17]],
                
                [[18, 19, 20],
                [21, 22, 23],
                [24, 25, 26]]])'

NumPy arrays and Python lists are similar, but not the same

To import an image, type 'import cv2'
In next line, type im_g=cv2.inread("image.png,0)
The inread function requires two arguments: the image name and either 0 or 1.
0 means that you want to read the image in grayscale
1 means that you want to read the image in BGR (Blue, Green, Red)
In the next line, type 'im_g' to run it
It should give you a 2D NumPy array that has the same dimensions as your image
Now, say you were to type 'im_g=cv2(image.png,1)'
In the next line, type 'im_g' to run it
Instead of a 2D array, you would get a 3D array
Each box of numbers have the same dimensions as the image
However, each box represents a different color and their intensity
The first box is for blue and blue's intensity
The second box is for green and green's intensity
The third and final box is for red and red's intensity
As an example, say you have a 3x5 pixel image with different tones of gray
You have already printed out a 3D/BGR array
The first pixel would have a blue intensity of 187, a green intensity of 198, and a red intensity of 209

To create a copy of the pixel image:
Type 'cv2.imwrite("newimage.png", im_g)'
If you run this, and your output it True, then the copy should have been created

If you try to run this code (ims=numpy.hstack(m,m)) you will receive an error that two arguments were given instead of one
numpy.hstack() can only take one argument
The 'h' in '.hstack' stands for 'horizontal'
To allow two or more arguments, use a tuple
'ims=numpy.hstack((m,m))'
Type 'ims' in the next line and run the code
You should get both 'm' cubes printed next to each other
To print out the cubes vertically instead of horizontally, use '.vstack'

Say you have 3x5 cubes
If you try to run this function (lst=numpy.hsplit(m,3)), you will get an error
'hsplit' stands for horizontal split
The reason for the error is because 5 cannot be divided 3 times
However, 5 is divisible by 5, so if you were to replace '3' with '5', there should be no more error
Type 'lst' in the next line and run the code
You should get 5 NumPy arrays, which is 1 array for each column
In this case, if you wanted to do a vertical split, you would have to change two things
1: you would need to turn 'hsplit' to 'vsplit'
2: you would need to change 5 to 3.
Remember, this is a 3x5 cube, and 3 is only divisible by 3
Run the code and it should give you 3 arrays

