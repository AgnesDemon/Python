USING JUPYTER
To get into Jupyter Notebook, go to the terminal and type 'jupyter notebook'
This should open a new tab on the browser for jupyter
To create a new file, click on the New button and click on Notebook
This should create a new notebook that you can name and use
You can write lines of code in this notebook
Press Enter to get a new line in the cell (where the code is written)
To execute the code, press Ctrl + Enter, which should give you the output
To create a new cell, press Alt + Enter, which will allow you to write another block of code
To delete a cell, press Esc, then press DD (D twice)
Shift + Enter will automatically run a cell and take you to a new one
There are two modes:
Command mode - the box surrounding the cell is gray
Edit mode - the box is green and you are able to create, code, execute, delete, etc
To access more keyboard functions, click on Help, then navigate to Keyboard Shortcuts
This will show you other keyboard functions that you can use

TYPES OF FILES
CSV - comma separated values (file.csv)
TXT - text file (file.txt)
EXCEL or XLSX - Excel file that uses rows and columns (file.xslx)
JSON - Json file that looks like a dictionary (file.json)

LOADING CSV FILES
In Jupyter, type 'import os'
On the next line in the same cell, type os.listdir()
'os.listdir()' command allows you to see your files
Execute this and it should give you a list of your files and their names
In another cell, type 'import pandas'
In another cell, type 'df1=pandas.read_csv("csv file name")'
In a new line in the same cell, type 'df1'
Execute the code and it should give you your CSV file

LOADING JSON FILES
Just like CSV files, make sure os and pandas are imported
In a new cell, type 'df2=pandas.read_json("json file name")'
In the next line, type 'df2.set_index("ID")'
Execute the code and you should see your Json file

LOADING XLSX FILES
Make sure os and pandas are imported
Type 'df3=pandas.read_excel("xslx file name", sheet_name=0)'
'sheet_name=0' sets the sheet to 0
Finally, type 'df3' and execute the code to get the file

LOADING TXT FILES SEPARATED WITH COMMAS
Make sure os and pandas are imported
Type 'df4=pandas.read_csv("file name.txt")'
Type 'df4' in the next line
Execute the code and you should get the file
Since the commas are used as separators of the data, you don't have to pass any separator parameters

LOADING TXT FILES SEPARATED WITH SEMI-COLONS
Make sure os and pandas are imported
Type 'df5=pandas.read_csv("filename.txt", sep=";")'
'sep=";"' sets the separator to a semi-colon, since it is a comma by default
Type 'df5' in the next line and execute the code
You should now see your file

If you run into any errors while trying to load a csv file, type 'pandas.read_csv?'
This should give you a list of what you may need to change to fix your code

Headers - give names to the columns in a file
If you have a file that does not have a header for the data, do this:
In a new cell, type 'df6=pandas.reac_csv("filename.csv", header=None)'
This should prevent the first set of data from acting like the header
Instead of the data or words being the header, the header will be numbers, like the rows

GIVING NON-NAMED COLUMNS NAMES
*Using my df3 example
Type 'df3.columns = ["Name", "Water", "Electric", "Phone", "Rent", "Car"]'
In the next line, type 'df3' and execute the code
This should give you headings (or column names) for your data
Make sure that there are the same amount of column names as columns, or an error will occur

FINDING SECTIONS OF DATA USING COORDINATES
*Using my df3 example
Type 'df3.set_index("Whatever you want to set as your index") in a new cell
In this case, I used name
*Note: make sure headers are in place
Make sure which ever column name you use is the same as what ever you set as your index
If you execute the code the way it is, it will work
However, if you put df3 in the next line, it will not work
To get it to save, you will need to create another variable to save it in
So, type 'df4 = df3.set_index("set index")'
Type 'df4' in the next line, then run the code
It should work now
Another way to do this is:
Type 'df3.set_index("set index", inplace=True)'
It will work when you run it
However, if you type something else as an index, the first column will disappear
My example:
Say I set Name as my first index
If I try to set Water (the next column) as my new index, the Name column will disappear
You can type 'df3.set_index("set index", inplace=True, drop=False) so it can keep the newly named index column

LABEL INDEXING
Type 'df3.loc["Row Name", "Column name"]
#This would be for a specific piece of data
To gather a group of data:
Type 'df3.loc["Row Name":"Row Name", "Column Name":"Column Name"]
If you want to print a whole column, type 'df3.loc[:, "Column Name"]
You can also print it like a list with 'list(df3.loc[:, "Column Name"])

df.iloc[1:3,1:3]
Sets coordinates for rows and columns that you want to print
df.iloc[:, 1:3]
Prints out all the rows and the range of columns
df.iloc[3, 1:3]
Prints out a single row and the range of columns

DELETING COLUMNS AND ROWS
df.drop("Column name", 1)
Will delete the column named
df.drop("Row Name", 0)
Will delete the row named
Note that these changes aren't exactly saved, so you can just type df to get the original data back
I believe the numbers set an exact coordinate of which column to delete
0, in columns, would actually be the row names, so you would have to set it to 1 to delete the first column
*I could be wrong

To keep the changes:
'df = df.drop("Column Name", 1)'
'df = df.drop("Row Name", 0)
To drop rows or columns based on indexing:
df.drop(df.index[0,3],0) for rows
df.drop(df.columns[0,3],1) for columns
To print out the names of your rows: df.index
To print out the names of your columns: df.columns

UPDATING AND ADDING NEW COLUMNS AND ROWS
df["New column name"]=["A", "B", "C",...] *depending on how many rows you have
If the new column basically has the same data for each row, then:
df["New column name"]=df.shape[0]*["Data"]
This will set all of the rows with the same data in the new column
Executing df.shape will tell you how many rows and columns you have
To update a column:
df["New column name"]=df["New Data"] + "," + "original data"
To add a new row:
In a new cell, type 'df_t=df.T'
In a new line, type 'df_t'
This will print the data, but the rows will become columns and the columns will become the rows
Next:
Since the rows have become columns, you will technically have to create a new column
In new cell, type 'df_t["New 'column' name"]=["Data", "Data", "Data",...]' *depending on how many 'rows' you have
In new line, type 'df_t' and run it
It should give you a new 'column'
Then, to switch everything back to normal with the new data:
Type 'df=df_t.T'
In new line, type 'df'
Everything should be back to normal with the new data

